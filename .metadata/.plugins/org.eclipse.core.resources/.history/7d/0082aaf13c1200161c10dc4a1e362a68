package recfun
import common._
import scala.annotation.tailrec

object Main {
  def main(args: Array[String]) {
    println("Pascal's Triangle")
    for (row <- 0 to 10) {
      for (col <- 0 to row)
        print(pascal(col, row) + " ")
      println()
    }
  }

  /**
   * Exercise 1
   */
  def pascal(c: Int, r: Int): Int = {
    @tailrec def row(i: Int, v: Vector[Int]): Vector[Int] = i match {
      case 0 => v
      case _ => {
        val newV = 1 +: v.sliding(2).filter(_.size > 1).map(_.sum).toVector :+ 1
        row(i - 1, newV)
      }
    }
    row(r, Vector(1))(c)
  }

  /**
   * Exercise 2
   */
  def balance(chars: List[Char]): Boolean = {
    @tailrec def inner(l: List[Char], i: Int): Boolean = (l, i) match {
      case (l, i) if l.isEmpty => i == 0
      case (l, i) if i < 0 => false
      case ('(' :: t, i) => inner(t, i + 1)
      case (')' :: t, i) => inner(t, i - 1)
      case (h :: t, i) => inner(t, i)
      
    }
    inner(chars, 0)
  }

  /**
   * Exercise 3
   */
  def countChange(money: Int, coins: List[Int]): Int = {
    def inner(left: Int, availableCoins: List[Int]): Int = left match {
      case (0, c) => 1
      case (_, nil) => 0
    }
    inner(money, coins)
  }
}
