package week2

import math.abs

object session {
  /* def sum(f: Int => Int, a: Int, b: Int) = {
		def loop(a: Int, acc: Int): Int =
			if (a > b) acc
			else loop(a + 1, f(a) + acc)
			
		loop(a, 0)
	}
	
	def product(f: Int => Int)(a: Int, b: Int): Int =
		if (a > b) 1
		else f(a) * product(f)(a + 1, b)
		
	product(x => x * x)(3, 4)
	
	def factorial(a: Int) = product(x => x)(1, a)
	factorial(5)
	
	def mapReduce(f: Int => Int, combine: (Int, Int) => Int, zero: Int)(a: Int, b: Int): Int =
		if (a > b) zero
		else combine(f(a), mapReduce(f, combine, zero)(a + 1, b))
	mapReduce(x => x, (x, y) => x + y, 0)(0, 10) */
	
	val tolerance = 0.0001                    //> tolerance  : Double = 1.0E-4
	def isCloseEnough(x: Double, y: Double) =
		abs((x - y) / x) / x < tolerance  //> isCloseEnough: (x: Double, y: Double)Boolean
		
	def fixedPoint(f: Double => Double)(firstGuess: Double) = {
		def iterate(guess: Double): Double = {
			val next = f(guess)
			if (isCloseEnough(guess, next)) next
			else iterate(next)
		}
		iterate(firstGuess)
	}                                         //> fixedPoint: (f: Double => Double)(firstGuess: Double)Double
	fixedPoint(x => (16 + x) / 2)(1)          //> res0: Double = 15.9853515625
	def averageDamp(f: Double => Double)(x: Double) = (x + f(x)) / 2
                                                  //> averageDamp: (f: Double => Double)(x: Double)Double

	def sqrt(x: Double) =
		fixedPoint(averageDamp(y => x / y))(1)
                                                  //> sqrt: (x: Double)Double
		
	sqrt(4)                                   //> res1: Double = 2.000000000000002
                                                 
	
	
}