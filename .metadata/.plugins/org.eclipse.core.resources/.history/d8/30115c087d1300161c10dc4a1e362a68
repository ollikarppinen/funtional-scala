package week3

object session {
  val x = new Rational(1, 3)                      //> x  : week3.Rational = 1/3
  val y = new Rational(5, 7)                      //> y  : week3.Rational = 5/7
  val z = new Rational(3, 2)                      //> z  : week3.Rational = 3/2

	x - y - z                                 //> res0: week3.Rational = -79/42
	y + y                                     //> res1: week3.Rational = 10/7
}

class Rational(x: Int, y: Int) {
	require(y > 0, "denominator must be positive")
	
	def this(x: Int) = this(x, 1)
	
	private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
	val numer = x
	val denom = y
	
	override def toString = {
		val g = gcd(x, y)
		numer / g + "/" + denom / g
	}
	
	def + (that: Rational): Rational =
		new Rational(
			numer * that.denom + that.numer * denom,
			denom * that.denom)
	
	def neg: Rational = new Rational(-numer, denom)
		
	def - (that: Rational) = add(that.neg)
	
	def < (that: Rational) = numer * that.denom < that.numer * denom
	
	def max(that: Rational) = if (less(that)) that else this
	
	def +(that: Rational) = add(that)
	def -(that: Rational) = sub(that)
	
}